{"version":3,"sources":["../../../src/services/translate.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAA,MAAE,EAAO,UAAA,EAAW,MAAM,eAAA,CAAgB;AACjD,OAAO,EAAA,IAAE,EAAI,MAAM,eAAA,CAAgB;AAEnC;IAAA;IAGA,CAAC;IAAD,sBAAC;AAAD,CAHA,AAGC,IAAA;;AAGD;IAME,0BACW,eAAgC,EACjC,IAAU;QADT,oBAAe,GAAf,eAAe,CAAiB;QACjC,SAAI,GAAJ,IAAI,CAAM;QAElB,IAAI,CAAC,QAAQ,GAAG,eAAe,CAAC,QAAQ,CAAC;QACzC,IAAI,CAAC,MAAM,GAAG,eAAe,CAAC,MAAM,CAAC;QACrC,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC5B,CAAC;IAED,6CAAkB,GAAlB;QAAA,iBASC;QARC,IAAM,SAAS,GAAG,YAAY,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QACtD,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACd,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;QAC5B,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,CAAC,SAAS,CAAC,UAAA,GAAG;YACtE,KAAI,CAAC,YAAY,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACjC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,oCAAS,GAAT,UAAU,KAAa;QACrB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACvB,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QACD,IAAI,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QAC3C,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YAChB,MAAM,CAAC,WAAW,CAAC;QACrB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;IACH,CAAC;IAED,yCAAc,GAAd,UAAe,KAAa;QAC1B,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC5B,YAAY,CAAC,OAAO,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;YAC3C,QAAQ,CAAC,MAAM,EAAE,CAAC;QACpB,CAAC;IACH,CAAC;IAUH,uBAAC;AAAD,CArDA,AAqDC;;AARM,2BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,+BAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,eAAe,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,kBAAkB,EAAG,EAAE,EAAG,EAAC;IACvF,EAAC,IAAI,EAAE,IAAI,GAAG;CACb,EAH6F,CAG7F,CAAC","file":"translate.service.js","sourceRoot":"","sourcesContent":["import {Inject, Injectable} from '@angular/core';\nimport {Http} from \"@angular/http\";\n\nexport class TranslateConfig {\n  folder: string;\n  language: string;\n}\n\n\nexport class TranslateService {\n\n  private language: string;\n  private folder: string;\n  private translations: any;\n\n  constructor(\n     private translateConfig: TranslateConfig,\n    private http: Http\n  ) {\n    this.language = translateConfig.language;\n    this.folder = translateConfig.folder;\n    this.reloadTranslations();\n  }\n\n  reloadTranslations() {\n    const savedLang = localStorage.getItem('yx_language');\n    if (savedLang) {\n      this.language = savedLang;\n    }\n\n    this.http.get(this.folder + '/' + this.language + '.json').subscribe(res => {\n      this.translations = res.json();\n    });\n  }\n\n  translate(value: string) {\n    if (!this.translations) {\n      return value;\n    }\n    let translation = this.translations[value];\n    if (translation) {\n      return translation;\n    } else {\n      return value;\n    }\n  }\n\n  changeLanguage(value: string) {\n    if (value !== this.language) {\n      localStorage.setItem('yx_language', value);\n      location.reload();\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TranslateConfig, decorators: [{ type: Inject, args: [\"translate.config\", ] }, ]},\n{type: Http, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}